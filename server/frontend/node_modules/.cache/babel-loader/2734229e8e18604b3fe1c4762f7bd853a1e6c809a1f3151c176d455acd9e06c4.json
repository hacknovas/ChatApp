{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prathamesh Doni\\\\Desktop\\\\WebD\\\\Project\\\\Real Time Chat\\\\frontend\\\\src\\\\Components\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport { ArrowBackIcon } from '@chakra-ui/icons';\nimport { Toast, useToast } from '@chakra-ui/react';\nimport { Box, FormControl, IconButton, Input, Text } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { ChatState } from '../Context/chatProvider';\nimport { getSender, getSenderFull } from '../config/ChatLogic';\nimport ProfileModel from './MiscLenous/ProfileModel';\nimport UpdateGroupChatModal from './MiscLenous/UpdateGroupChatModal';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SingleChat(_ref) {\n  _s();\n  let {\n    fetchAgain,\n    setfetchAgain\n  } = _ref;\n  const {\n    user,\n    selectedChat,\n    setSelectedChat\n  } = ChatState();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const toast = useToast();\n  const fetchMessage = async () => {\n    if (!selectedChat) {\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n    } catch (error) {}\n  };\n  const sendMessage = async e => {\n    if (e.key === \"Enter\" && newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat\n        }, config);\n        console.log(data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  const typingHandler = async e => {\n    setNewMessage(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 39\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.user), /*#__PURE__*/_jsxDEV(ProfileModel, {\n            user: getSenderFull(user, selectedChat.user)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setfetchAgain: setfetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 43\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"Go\"\n        }, void 0, false), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }, this)\n  }, void 0, false);\n}\n_s(SingleChat, \"NEVZqRuKxV01mYp6O9i1O6L4z2M=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["ArrowBackIcon","Toast","useToast","Box","FormControl","IconButton","Input","Text","React","useState","ChatState","getSender","getSenderFull","ProfileModel","UpdateGroupChatModal","axios","SingleChat","fetchAgain","setfetchAgain","user","selectedChat","setSelectedChat","messages","setMessages","loading","setLoading","newMessage","setNewMessage","toast","fetchMessage","config","headers","Authorization","token","data","get","_id","error","sendMessage","e","key","post","content","chatId","console","log","title","description","status","duration","isClosable","position","typingHandler","target","value","base","md","isGroupChat","chatName","toUpperCase"],"sources":["C:/Users/Prathamesh Doni/Desktop/WebD/Project/Real Time Chat/frontend/src/Components/SingleChat.js"],"sourcesContent":["import { ArrowBackIcon } from '@chakra-ui/icons';\r\nimport { Toast, useToast } from '@chakra-ui/react';\r\nimport { Box, FormControl, IconButton, Input, Text } from '@chakra-ui/react';\r\nimport React, { useState } from 'react'\r\nimport { ChatState } from '../Context/chatProvider'\r\nimport { getSender, getSenderFull } from '../config/ChatLogic';\r\nimport ProfileModel from './MiscLenous/ProfileModel';\r\nimport UpdateGroupChatModal from './MiscLenous/UpdateGroupChatModal';\r\nimport axios from 'axios';\r\n\r\nexport default function SingleChat({ fetchAgain, setfetchAgain }) {\r\n    const { user, selectedChat, setSelectedChat } = ChatState();\r\n\r\n    const [messages, setMessages] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n    const toast = useToast();\r\n\r\n    const fetchMessage = async () => {\r\n\r\n        if (!selectedChat) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${user.token}`\r\n                },\r\n            };\r\n\r\n            setLoading(true);\r\n\r\n            const { data } = await axios.get(\r\n                `/api/message/${selectedChat._id}`,\r\n                config\r\n            );\r\n            setMessages(data);\r\n            setLoading(false);\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const sendMessage = async (e) => {\r\n\r\n        if (e.key === \"Enter\" && newMessage) {\r\n\r\n            try {\r\n                const config = {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                        Authorization: `Bearer ${user.token}`,\r\n                    },\r\n                };\r\n\r\n                setNewMessage(\"\")\r\n                const { data } = await axios.post(\r\n                    \"/api/message\",\r\n                    {\r\n                        content: newMessage,\r\n                        chatId: selectedChat,\r\n                    },\r\n                    config\r\n                );\r\n                console.log(data);\r\n                setMessages([...messages, data]);\r\n\r\n            } catch (error) {\r\n                toast({\r\n                    title: \"Error Occured!\",\r\n                    description: \"Failed to send the Message\",\r\n                    status: \"error\",\r\n                    duration: 5000,\r\n                    isClosable: true,\r\n                    position: \"bottom\",\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const typingHandler = async (e) => {\r\n        setNewMessage(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                selectedChat ?\r\n                    <div>\r\n                        <Text\r\n                            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n                            pb={3}\r\n                            px={2}\r\n                            w=\"100%\"\r\n                            fontFamily=\"Work sans\"\r\n                            d=\"flex\"\r\n                            justifyContent={{ base: \"space-between\" }}\r\n                            alignItems=\"center\"\r\n                        >\r\n\r\n                            <IconButton\r\n                                d={{ base: \"flex\", md: \"none\" }}\r\n                                icon={<ArrowBackIcon />}\r\n                                onClick={() => setSelectedChat(\"\")}\r\n                            />\r\n                            {\r\n                                (!selectedChat.isGroupChat ? (\r\n                                    <>\r\n                                        {getSender(user, selectedChat.user)}\r\n                                        <ProfileModel user={getSenderFull(user, selectedChat.user)}\r\n                                        />\r\n\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        {selectedChat.chatName.toUpperCase()}\r\n                                        <UpdateGroupChatModal\r\n                                            fetchAgain={fetchAgain}\r\n                                            setfetchAgain={setfetchAgain}\r\n                                        />\r\n                                    </>\r\n                                ))}\r\n\r\n                        </Text>\r\n\r\n                        <Box\r\n                            d=\"flex\"\r\n                            flexDir=\"column\"\r\n                            justifyContent=\"flex-end\"\r\n                            p={3}\r\n                            bg=\"#E8E8E8\"\r\n                            w=\"100%\"\r\n                            h=\"100%\"\r\n                            borderRadius=\"lg\"\r\n                            overflowY=\"hidden\"\r\n                        >\r\n                            {\r\n                                loading ? <div>Loading</div> : <>Go</>\r\n                            }\r\n\r\n                            <FormControl onKeyDown={sendMessage} id=\"first-name\" isRequired mt={3}>\r\n                                <Input\r\n                                    variant=\"filled\"\r\n                                    bg=\"#E0E0E0\"\r\n                                    placeholder=\"Enter a message..\"\r\n                                    value={newMessage}\r\n                                    onChange={typingHandler}\r\n                                />\r\n                            </FormControl>\r\n                        </Box>\r\n                    </div>\r\n                    :\r\n                    (\r\n                        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n                            <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n                                Click on a user to start chatting\r\n                            </Text>\r\n                        </Box>\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}